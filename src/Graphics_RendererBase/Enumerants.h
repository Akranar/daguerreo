#ifndef _ENUMERANTS_H_
#define _ENUMERANTS_H_

enum TextureType
{
	TEXTURE_TYPE_1D,
	TEXTURE_TYPE_2D,
	TEXTURE_TYPE_3D,
	TEXTURE_TYPE_CUBE,
};

enum VIBufferUsage
{
	BUFFER_USAGE_IMMUTABLE,
	BUFFER_USAGE_STATIC,
	BUFFER_USAGE_DYNAMIC,
	BUFFER_USAGE_STREAM
};

enum TextureUsage
{
	TEXTURE_USAGE_STATIC,
	TEXTURE_USAGE_WRITE_ONLY,
	TEXTURE_USAGE_READABLE
};

enum TextureBind
{
	BIND_SHADER_RESOURCE = 0x01,
	BIND_RENDER_TARGET = 0x02,
	BIND_DEPTH_STENCIL = 0x04
};

enum MapAccess
{
	MAP_READ_ONLY,
	MAP_READ_AND_WRITE,
	MAP_WRITE_INVALIDATE_ALL,
	MAP_WRITE_UNUSED_RANGE,
	MAP_WRITE_ONLY,
	MAP_WRITE_INVALIDATE_RANGE,
};

enum PixelFormat
{
	PF_128_R32G32B32A32,
	PF_96_R32G32B32,
	PF_64_R16G16B16A16,
	PF_64_R32G32,
	PF_64_R32G8X24,
	PF_32_R8G8B8A8,
	PF_32_R16G16,
	PF_32_R32,
	PF_32_R10G10B10A2,
	PF_32_R24G8
};

enum DataTypes
{
	DT_FLOAT,
	DT_DOUBLE,
	DT_INT,
	DT_UINT,
	DT_SHORT,
	DT_USHORT,
	DT_BYTE,
	DT_UBYTE,
	DT_COUNT
};

enum SamplerType
{
	ST_SAMPLER_1D,
	ST_SAMPLER_2D,
	ST_SAMPLER_3D,
	ST_SAMPLER_CUBE,
	ST_SAMPLER_1D_SHADOW,
	ST_SAMPLER_2D_SHADOW,
	ST_COUNT
};

enum VertexDeclaration
{
	VD_POSITION_FLOAT3 = 1,
	VD_POSITION_FLOAT4,
	VD_NORMAL_FLOAT3,
	VD_NORMAL_FLOAT4,

	VD_COLOR_FLOAT3_0 = 5,
	VD_COLOR_FLOAT4_0,
	VD_COLOR_UBYTE3_0,
	VD_COLOR_UBYTE4_0,

	VD_COLOR_FLOAT3_1 = 9,
	VD_COLOR_FLOAT4_1,
	VD_COLOR_UBYTE3_1,
	VD_COLOR_UBYTE4_1,

	VD_TANGENT_FLOAT3 = 13,
	VD_TANGENT_FLOAT4,
	VD_BINORMAL_FLOAT3,
	VD_BINORMAL_FLOAT4,

	VD_BLENDWEIGHT_FLOAT1 = 17,
	VD_BLENDWEIGHT_FLOAT2,
	VD_BLENDWEIGHT_FLOAT3,
	VD_BLENDWEIGHT_FLOAT4,

	VD_BLENDINDICES_UINT1 = 21,
	VD_BLENDINDICES_UINT2,
	VD_BLENDINDICES_UINT3,
	VD_BLENDINDICES_UINT4,

	VD_TEXCOORD_FLOAT1_0 = 25,
	VD_TEXCOORD_FLOAT2_0,
	VD_TEXCOORD_FLOAT3_0,
	VD_TEXCOORD_FLOAT4_0,

	VD_PSIZE_FLOAT = 69
};

//Render States

enum BSBlendFactor
{
	BS_ZERO,
	BS_ONE,
	BS_SRC_COLOR,
	BS_INV_SRC_COLOR,
	BS_SRC_ALPHA,
	BS_INV_SRC_ALPHA,
	BS_DEST_ALPHA,
	BS_INV_DEST_ALPHA,
	BS_DEST_COLOR,
	BS_INV_DEST_COLOR,
	BS_SRC_ALPHA_SATURATE,
	BS_BLEND_FACTOR,
	BS_INV_BLEND_FACTOR,
	BS_SRC1_COLOR,
	BS_INV_SRC1_COLOR,
	BS_SRC1_ALPHA,
	BS_INV_SRC1_ALPHA,
	BS_BLEND_COUNT
};

enum BSBlendFunc
{
	BS_FUNC_ADD,
	BS_FUNC_SUBTRACT,
	BS_FUNC_REVERSE_SUBTRACT,
	BS_FUNC_MIN,
	BS_FUNC_MAX,
	BS_FUNC_COUNT
};

enum DSOperation
{
	DS_OP_KEEP,
	DS_OP_ZERO,
	DS_OP_REPLACE,
	DS_OP_INCR_SATURATE,
	DS_OP_DECR_SATURATE,
	DS_OP_INVERT,
	DS_OP_INCR_WRAP,
	DS_OP_DECR_WRAP,
	DS_OP_COUNT
};

enum ComparisonMode
{
	COMPARE_NEVER,
	COMPARE_LESS,
	COMPARE_EQUAL,
	COMPARE_LEQUAL,
	COMPARE_GREATER,
	COMPARE_NOTEQUAL,
	COMPARE_GEQUAL,
	COMPARE_ALWAYS,
	COMPARE_COUNT
};

enum RSFill
{
	RS_FILL_WIREFRAME,
	RS_FILL_SOLID,
	RS_FILL_COUNT
};
enum RSCull
{
	RS_CULL_NONE,
	RS_CULL_FRONT,
	RS_CULL_BACK,
	RS_CULL_COUNT
};


//Order: MIN, MAG, MIP
enum SamplerFilter
{
	FILTER_NEAREST_NEAREST_NEAREST,
	FILTER_NEAREST_NEAREST_LINEAR,
	FILTER_NEAREST_LINEAR_NEAREST,
	FILTER_NEAREST_LINEAR_LINEAR,
	FILTER_LINEAR_NEAREST_NEAREST,
	FILTER_LINEAR_NEAREST_LINEAR,
	FILTER_LINEAR_LINEAR_NEAREST,
	FILTER_LINEAR_LINEAR_LINEAR,
	FILTER_ANISOTROPIC,
	FILTER_COMP_NEAREST_NEAREST_NEAREST,
	FILTER_COMP_NEAREST_NEAREST_LINEAR,
	FILTER_COMP_NEAREST_LINEAR_NEAREST,
	FILTER_COMP_NEAREST_LINEAR_LINEAR,
	FILTER_COMP_LINEAR_NEAREST_NEAREST,
	FILTER_COMP_LINEAR_NEAREST_LINEAR,
	FILTER_COMP_LINEAR_LINEAR_NEAREST,
	FILTER_COMP_LINEAR_LINEAR_LINEAR,
	FILTER_COMP_ANISOTROPIC,
	FILTER_COUNT
};
enum SamplerEdge
{
	SAMPLER_EDGE_WRAP,
	SAMPLER_EDGE_MIRROR,
	SAMPLER_EDGE_CLAMP,
	SAMPLER_EDGE_BORDER,
	SAMPLER_EDGE_COUNT
};

//

enum ShaderDomains
{
	DOMAIN_VERTEX,
	DOMAIN_FRAGMENT,
	DOMAIN_GEOMETRY,
	DOMAIN_COUNT
};

enum PrimitiveType
{
	PRIMITIVE_TRIANGLE_LIST,
	PRIMITIVE_TRIANGLE_STRIP,
	PRIMITIVE_LINE_LIST,
	PRIMITIVE_COUNT
};


#endif